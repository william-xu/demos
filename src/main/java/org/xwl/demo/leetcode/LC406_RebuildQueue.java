package org.xwl.demo.leetcode;

import java.util.Arrays;
import java.util.LinkedList;

/**
 * 406. 根据身高重建队列
 * 
 * @author xwl
 *
 *         假设有打乱顺序的一群人站成一个队列。 每个人由一个整数对(h,
 *         k)表示，其中h是这个人的身高，k是排在这个人前面且身高大于或等于h的人数。 编写一个算法来重建这个队列。
 * 
 *         注意： 总人数少于1100人。
 * 
 *         示例
 * 
 *         输入: [[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]
 * 
 *         输出: [[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]
 *
 *         [[7,0], [7,1], [6,1], [5,0], [5,2], [4,4]] 
 *         [[7,0], [6,1], [7,1], [5,0], [5,2], [4,4]] 
 *         [[5,0], [7,0], [6,1], [7,1], [5,2], [4,4]]
 *         [[5,0], [7,0], [5,2], [6,1], [7,1], [4,4]] 
 *         [[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]
 * 
 *         来源：力扣（LeetCode）
 *         链接：https://leetcode-cn.com/problems/queue-reconstruction-by-height
 *         著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 *
 */



public class LC406_RebuildQueue {

	
	/**
	 * 数组元素先按身高从高到低排序
	 * 从高到低读取元素逐个插入列表，插入位置为整数对的第2个值，即比它高的n个人后，第n+1位，由于索引从0开始，插入索引=n，
	 * 因为是从高到低插入元素，后面插入的元素必定比已经插入元素的身高低，所以插入不会影响已有排序
	 * @param people
	 * @return
	 */
    public static int[][] reconstructQueue(int[][] people) {
        // [7,0], [7,1], [6,1], [5,0], [5,2], [4,4]
        // 再一个一个插入。
        // [7,0]
        // [7,0], [7,1]
        // [7,0], [6,1], [7,1]
        // [5,0], [7,0], [6,1], [7,1]
        // [5,0], [7,0], [5,2], [6,1], [7,1]
        // [5,0], [7,0], [5,2], [6,1], [4,4], [7,1]
        Arrays.sort(people, (o1, o2) -> o1[0] == o2[0] ? o1[1] - o2[1] : o2[0] - o1[0]);

        LinkedList<int[]> list = new LinkedList<>();
        for (int[] i : people) {
            list.add(i[1], i);   
        }
        return list.toArray(new int[list.size()][2]);
    }

}
